Это весь файл views.py, напиши мне тесты на основе django.test.TestCase только для класса AppsDetailView

from django.shortcuts import render, redirect
from django.views.generic import ListView, DetailView
from .models import Groups, Apps, Comment
from .forms import AddComment

class GroupsListView(ListView):
    model = Groups
    template_name = 'main/home.html'
    context_object_name = 'groups'

    def get_context_data(self, **kwargs):
        ctx = super(GroupsListView, self).get_context_data(**kwargs)
        
        apps = Apps.objects.all()
        ctx['apps'] = apps
        ctx['title'] = 'ruStore - приложения'
        ctx['title_view_groups'] = 'Группы'
        ctx['title_view_apps'] = 'Приложения'

        return ctx
    
def groups(request):
    return redirect('home')

class GroupsDetailView(DetailView):
    model = Groups
    template_name = 'main/group.html'
    context_object_name = 'group'

    def get_context_data(self, **kwargs):
        ctx = super(GroupsDetailView, self).get_context_data(**kwargs)
        ctx['title'] = Groups.objects.filter(slug=self.kwargs['slug']).first()
        group = Groups.objects.filter(slug=self.kwargs['slug']).first()
        groups = Groups.objects.all()
        ctx['groups'] = groups
        ctx['apps'] = Apps.objects.filter(group=group)

        return ctx

class AppsDetailView(DetailView):
    model = Groups
    template_name = 'main/app.html'

    def get_context_data(self, **kwargs):
        ctx = super(AppsDetailView, self).get_context_data(**kwargs)
        group = Groups.objects.filter(slug=self.kwargs['slug']).first()
        app = Apps.objects.filter(slug=self.kwargs['slug_app']).first()
        groups = Groups.objects.all()
        comment = Comment.objects.filter(app=app)
        form_comment = AddComment()
        ctx['groups'] = groups
        ctx['group'] = group
        ctx['app'] = app
        ctx['comment'] = comment
        ctx['form'] = form_comment
        return ctx

    def post(self, request, *args, **kwargs):

        app = Apps.objects.filter(slug=self.kwargs['slug_app']).first()

        post = request.POST.copy()
        post['avtor'] = request.user
        post['app'] = app
        request.POST = post

        form = AddComment(request.POST)
        
        if form.is_valid():
            form.save()
        
        url = self.kwargs['slug'] + '/' + self.kwargs['slug_app']
        return redirect('/groups/' + url)


    
Файл models.py думаю тоже понадобится:

from django.db import models
from django.urls import reverse
from django.contrib.auth.models import User
from ckeditor_uploader.fields import RichTextUploadingField

class Groups(models.Model):
    slug = models.SlugField('Уникальный URL', unique=True)
    title = models.CharField('Имя', max_length=100)
    desc = models.TextField('Описание')

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('group', kwargs={'slug': self.slug})

    class Meta:
        verbose_name = 'Группа'
        verbose_name_plural = 'Группы'

class Apps(models.Model):
    slug = models.SlugField('Уникальный URL', unique=True)
    title = models.CharField('Название приложения', max_length=100)
    desc = models.TextField('Описание')
    image = models.ImageField('Иконка приложения', default='default.png', upload_to='apps_images')
    group = models.ForeignKey(Groups, on_delete=models.CASCADE, verbose_name='Группа приложения')

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('app', kwargs={'slug': self.group.slug, 'slug_app': self.slug})
    

    class Meta:
        verbose_name = 'Приложение'
        verbose_name_plural = 'Приложения'

class Comment(models.Model):
    text = RichTextUploadingField(verbose_name='Комментарий')
    avtor = models.ForeignKey(User, default='user', verbose_name='Автор', on_delete=models.CASCADE)
    app = models.ForeignKey(Apps, default='app', verbose_name='Приложение', on_delete=models.CASCADE)

    class Meta:
        verbose_name = 'Комментарий'
        verbose_name_plural = 'Комментарии'
    
    def __str__(self):
        return f'В {self.app} написал {self.avtor}'
    


Файл forms.py думаю тоже понадобится:

from django import forms
from .models import Comment

class AddComment(forms.ModelForm):
    # text = forms.CharField(
    #     label='Комментарий',
    #     required=True,
    #     min_length=5,
    #     widget=forms.Textarea(attrs={'placeholder': 'Введите сообщение'})
    # )
    
    class Meta:
        model = Comment
        fields = ['text', 'avtor', 'app']
        widgets = {'avtor': forms.HiddenInput(), 'app': forms.HiddenInput()}
